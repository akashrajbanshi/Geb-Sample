import static groovyx.net.http.ContentType.BINARY
import groovyx.net.http.HTTPBuilder
import static groovyx.net.http.Method.GET
import org.apache.commons.io.FileUtils

apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "groovy"

defaultTasks 'clean', 'htmlunitTest'

ant.condition(property: "os", value: "windows") { os(family: "windows") }
ant.condition(property: "os", value: "unix") { os(family: "unix") }

ext.drivers = ["firefox", "chrome", "ie", "htmlunit"]

def enc = 'utf-8'
[
        compileJava,
        compileGroovy,
        compileTestJava,
        compileTestGroovy,
].each { it.options.encoding = enc }
[
        compileGroovy,
        compileTestGroovy,
].each { it.groovyOptions.encoding = enc }

repositories {
    jcenter()
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'commons-io:commons-io:2.4'
        classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
    }
}
dependencies {
    def seleniumVersion = '2.41.0'
    def gebVersion = "0.9.2"
    testCompile 'org.codehaus.groovy:groovy-all:2.2.2'
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
    testCompile "org.gebish:geb-core:$gebVersion"
    testCompile "org.gebish:geb-spock:$gebVersion"

    testRuntime "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
    // Drivers
    drivers.each { driver ->
        testCompile "org.seleniumhq.selenium:selenium-$driver-driver:$seleniumVersion"
    }
}

drivers.each { driver ->
    task "${driver}Test"(type: Test) {
        downloadDrivers()
        reports {
            html.destination = reporting.file("$name/tests")
            junitXml.destination = file("$buildDir/test-results/$name")
        }

        systemProperty "geb.build.reportsDir", reporting.file("$name/geb")
        systemProperty "geb.env", driver

        // If you wanted to set the baseUrl in your buildâ€¦
        // systemProperty "geb.build.baseUrl", "http://myapp.com"
    }
}

test {
    if (ant.properties.os != "windows"){drivers.minus("ie")}
    dependsOn drivers.collect { tasks["${it}Test"] }
    enabled = false
}

task wrapper(type: Wrapper) { gradleVersion = '1.11' }

eclipse {
    pathVariables GRADLE_REPO: file(System.properties['user.home'] + '/.gradle/cache')
}

def downloadDrivers() {
    if ( new File("drivers").exists()) return

    [
        [
                url: "http://chromedriver.storage.googleapis.com/2.9/chromedriver_win32.zip",
                zip: "drivers/chrome/chromedriver_win32.zip",
        ],
        [
                url: "http://chromedriver.storage.googleapis.com/2.9/chromedriver_mac32.zip",
                zip: "drivers/chrome/chromedriver_mac32.zip",
        ],
        [
                url: "http://selenium.googlecode.com/files/IEDriverServer_Win32_2.30.1.zip",
                zip: "drivers/ie/IEDriverServer_Win32_2.30.1.zip",
        ]
    ].each {
        def zipFile = new File(it.zip)
        mkdir(zipFile.getParent())
        new HTTPBuilder().request(it.url,
                GET, BINARY) { req ->
            response.success = { resp, zip ->
                FileUtils.copyInputStreamToFile(zip as InputStream, zipFile)
            }
        }
        ant.unzip(src: zipFile.absolutePath, dest: zipFile.getParent())
    }
}
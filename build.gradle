apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "groovy"

defaultTasks 'clean', 'htmlunitTest'

ext {
    drivers = ["firefox", "chrome", "ie", "htmlunit"]
    driverDir = "drivers"
    driversUrl = ['http://selenium-release.storage.googleapis.com/2.45/IEDriverServer_Win32_2.45.0.zip',
        "http://chromedriver.storage.googleapis.com/2.14/chromedriver_mac32.zip",
        "http://chromedriver.storage.googleapis.com/2.14/chromedriver_win32.zip"
    ]
}

ant.condition(property: "os", value: "windows") { os(family: "windows") }
ant.condition(property: "os", value: "unix") { os(family: "unix") }

def defaultEncoding = 'UTF-8'
tasks.withType(AbstractCompile) each { it.options.encoding = defaultEncoding }
tasks.withType(GroovyCompile) each { it.groovyOptions.encoding = defaultEncoding }

repositories {
    jcenter()
}

dependencies {
    def seleniumVersion = '2.45.0'
    def gebVersion = "0.10.0"
    compile 'org.codehaus.groovy:groovy-all:2.4.3'
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    testCompile "org.gebish:geb-core:$gebVersion"
    testCompile "org.gebish:geb-spock:$gebVersion"

    testRuntime "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
    // Drivers
    drivers.each { driver ->
        testCompile "org.seleniumhq.selenium:selenium-$driver-driver:$seleniumVersion"
    }
}

task downloadDrivers(type: DownloadDrivers) {
    sourceUrls = driversUrl
    target = file(driverDir)
}

class DownloadDrivers extends DefaultTask {
    @Input
    String[] sourceUrls

    @OutputDirectory
    File target

    @TaskAction
    void download() {
        if (target.list().length != 0) return;

        ant.get(dest: target) {
            sourceUrls.each { url(url: it) }
        }
        ant.unzip(dest: target) {
            fileset(dir: target) {
                include(name: "*.zip")
            }
        }
        if (ant.properties.os == 'unix')
            ant.chmod(file: "${target}/chromedriver", perm: '755')
    }
}

drivers.each { driver ->
    task "${driver}Test"(type: Test, dependsOn: downloadDrivers) {
        description "Runs ${driver} tests."

        reports {
            html.destination = reporting.file("$name/tests")
            junitXml.destination = file("$buildDir/test-results/$name")
        }

        systemProperty "geb.build.reportsDir", reporting.file("$name/geb")
        systemProperty "geb.env", driver

        systemProperty "my.webdriver.dir", (driverDir)

        // If you wanted to set the baseUrl in your buildâ€¦
        // systemProperty "geb.build.baseUrl", "http://myapp.com"
    }
}

test {
    def taskList = drivers.minus("htmlunit")
    if (ant.properties.os == "unix") {
        taskList = taskList.minus("ie")
    }
    dependsOn taskList.collect { tasks["${it}Test"] }
    enabled = false
}

task wrapper(type: Wrapper) { gradleVersion = '2.3' }

eclipse {
    pathVariables GRADLE_REPO: file(System.properties['user.home'] + '/.gradle/cache')
}

